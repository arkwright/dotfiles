========
 Vim
========

Normal Mode

hjkl              Left/Down/Up/Right Cursor Movement
i                 Enter insert mode before cursor (“insert”)
I                 Enter insert mode at the beginning of the current line (“insert bol”)
a                 Enter insert mode after cursor (“append”)
A                 Enter insert mode at the end of the current line (“append eol”)
v                 Enter visual mode
V                 Enter visual lines mode (motions select whole lines)
<C-v>             Enter visual block mode (motions select text as if it were a huge grid)
<C-r>{reg}        While in insert mode *and* in visual block mode, will paste the contest of register {reg} into the current insertion. Use register 0 to grab the most recently yanked text.
:w                Save the file (“write”)
:q                Close the file (“quit”)
:sp               Open a new horizontal split.
:vs               Open a new vertical split.
:so %             Install a vimball archive (after you have already opened it)
G		  Go to end of file.
gg		  Go to beginning of file.
H		  Go to top line in visible window.
L		  Go to bottom line in visible window.
J		  Join selected lines together.
X		  Backspace the character to the left of the cursor, while remaining in normal mode.
x                 Delete the character underneath the cursor
dw                Delete to beginning of next word
de                Delete to end of next word
D                 Delete from cursor to end of current line
w                 Move to beginning of next word
W                 Move to beginning of previous word
~                 Toggle case of characters under cursor
f{char}           Find the next occurrance of {char} on the current line.
F{char}           Find the previous occurrance of {char} on the current line.
;                 Repeat the previous f, F, t or T command in a forwards direction.
,                 Repeat the previous f, F, t or T command in a backwards direction.
iw                "Inner word" adjective. Makes it easy to perform operations when your cursor is positioned anywhere within the word. You can do yiw, diw, ciw, viw, and so on.
aw                "A word" adjective. Makes it easy to perform operations when your cursor is positioned anywhere within the word. You can do yaw, daw, caw, vaw, and so on.
vib               Select all text within the current parenthesis.
vab               Select all text within the current parenthesis, including the parenthesis themselves.
viB               Select all text within the current braces.
vaB               Select all text within the current braces, including the braces themselves.
zt                Scroll the window such that the line where the cursor is located is situated at the top of the screen.
zz                Scroll the window such that the line where the cursor is located is situated at the middle of the screen.
zb                Scroll the window such that the line where the cursor is located is situated at the bottom of the screen.
zs                Scroll the text horizontally to position the cursor at the start (left side) of the screen.
ze                Scroll the text horizontally to position the cursor at the end (right side) of the screen.
ci'               On the current line, delete whatever is inside the next set of single quotes and enter insert mode.
ci"               On the current line, delete whatever is inside the next set of double quotes and enter insert mode.
ddp               Swap the current line with the next one.
kddp              Swap the current line with the previous one.
#                 Search backward for the word under the cursor.
*                 Search forward the word under the cursor.
%                 Jumps to the next closing parentesis. If the cursor is currently on a parenthesis, bounces to its matching opposite.
<C-n>             In insert mode, autocompletes the current word.
:cd /dir          Change the current working directory to "dir"
:pwd              Print the current working directory.
:marks            Print a list of all currently specified marks.
m{a-zA-Z}         Set a mark at the current cursor position, e.g., "ma".
'{a-zA-Z}         Jump to the first non-blank character on the line where the specified mark is set, e.g., "'a".
`{a-zA-Z}         Jump to the exact character where the specified mark is set, e.g., "`a".
:reg              Print a list of all currently specified registers.
"{char}y          Copy what is currently selected into the register named {char}.
"{char}p          Paste what is in the register named {char}.
{                 Jump to the previous paragraph.
}                 Jump to the next paragraph.
[[                Jump to the previous opening brace in the first column.
]]                Jump to the next opening brace in the first column.
gd                Jump from the variable under the cursor to its local definition.
gD                Jump from the variable under the cursor to its global definition (within the current file).
gv                Recall the previous visual selection.
=                 Autoformat. Can be used on an existing visual selection, or you can do something like gg=G to format the entire file. Great for fixing indentation!
:<number><CR>     Jump to the specified absolute line number.
<Cmd-p>           When using YankRing plugin, cycles backwards through the ring while replacing recently pasted text.
<Cmd-P>           When using YankRing plugin, cycles forwards through the ring while replacing recently pasted text.
ds"               When using Surround plugin, removes double-quotes surrounding the current word.
dst               When using Surround plugin, removes HTML tags surrounding the current word.
cst<em>           When using Surround plugin, replaces the HTML tags surrounding the current word with <em></em> tags.
ysiw<em>          When using Surround plugin, wraps the current word in <em></em> HTML tags.
:cw               Open the quickfix window.
:ccl              Close the quickfix window.
:grep -r foo *    Perform a recursive grep search in the current working directory for pattern "foo". The results will be added to the quickfix list.
<C-a>             Increment the number underneath the cursor.
<C-x>             Decrement the number underneath the cursor.
q{char}           Start recording a macro and name it {char}. A lot of people simply type "qq" to quickly start recording to the "q" register.
q                 Stop recording the current macro.
@{char}           Play the macro named {char}. 
@:                Repeat the last Ex command.
{num}@{char}      Repeat the macro named {char} {num} times. Useful for dynamically building documents; write a macro to build one line, then repeat as necessary.
@@		  Repeat the last macro that was invoked. Very handy!
[range]@{char}    Repeat the macro named {char} over the specified ranage. (Easily select a range using visual-line mode.)
gq                Format the selected lines according to the value of &formatexpr. If &formatexpr is empty, just wrap them according to &textindent.
:global/pat/cmd   Execute the command on all lines that match pattern.


Visual Mode

Esc      Return to normal mode
o        Alternate selection anchor points


Visual Block Mode

Shift+i  Enter Insert mode. When you exit Insert Mode, everything you typed will be applied to the previously selected lines.


Insert Mode

Esc             Return to normal mode
<Ctrl-R>{reg}   Insert contents of the specified register.
<Ctrl-V>{chr}   Insert the literal version of the next character typed.


Command Line Mode

<C-f>           Open command line window. (:help command-line-window)
<Ctrl-R>{chr}   Insert the contents of the register nameed {chr}.
<Ctrl-V>{chr}   Insert the literal version of the next character typed.


Command Line Window

<C-c>    Continue editing in Command Line Mode.
<CR>     Execute the line that the cursor is on as a command.
:quit    Quit the command line window.


Diffing

:diffthis         Make current window part of the diff windows. (Use on each split to diff those splits.)
:diffoff          Turn off diffing for the current window.


Miscellaneous

To run a terminal command and output the results into the current buffer:

  :r ! command

To quickly change NERDTree to look at a specific directory:

  cd /this/sets/vims/working/directory
  [switch to NERDTree]
  CD

To delete every line in a file that matches pattern.

  :%g/pattern/d

To delete every line in a file that does *not* match pattern.

  :%g!/pattern/d

To make every line in a file uppercase:

  :%g/.*/normal gUgU

To remove all text from a line except for "pattern":

  :%s/^.*\(pattern\).*$/\1/g

To search for a pattern in the current buffer and count the number of matches ('n' flag):

  :%s/pattern//gn

To substitute using the last searched pattern (makes previewing patterns with / easy):

  :%s//replacement/g

To sort all lines in the buffer:

  :sort

To sort all lines in the buffer and remove duplicates:

  :sort u

To run an arbitrary Ex command in a bunch of files (e.g. substitute):
  1. Clear contents of argument list:
       :argdelete *
  2. Add desired files to argument list:
       :argadd **/*.js   " Will add all .js files in all subdirectories of the current directory.
  3. Run the command:
       :silent! argdo! %s/something/otherthing/g | update
  4. Optionally undo the command (this does not seem to work if `:set hidden` is not in your .vimrc):
       :silent! argdo! undo | update

==========================
 Ag (the Silver Searcher)
==========================

To search for multiple strings at the same time using Ag:

  :Ag "first term|second term|something_else"

To search for hidden files using Ag:

  :Ag --hidden searchterm

To search inside file paths matching a regex using Ag:

  :Ag -G regex
  :Ag -G .js      " Searches for JavaScript files.

To find file names matching a regex using Ag:

  :Ag -g \.js$    " Returns all files ending in .js

===========
 Amazon S3
===========

Use s3cmd for command-line access to S3 and easy backup/restore:

  http://s3tools.org/s3cmd
  http://populationjim.com/2011/02/21/install-and-setup-s3cmd-on-a-mac/

s3cmd stores its configuration in this file:

  ~/.s3cfg

To backup an S3 bucket via s3cmd:

  mkdir ~/Desktop/bucket-name
  s3cmd sync --recursive s3://bucket-name ~/Desktop/bucket-name

To restore an S3 bucket via s3cmd (the -P option sets public read-only permissions,
without it, the general public will see an "Access Denied" error):

  s3cmd put -P --recursive ~/Desktop/bucket-name s3://bucket-name


========
 Apache
========

Files are located here:

  /etc/apache2/httpd.conf
  /private/var/log/apache2/error_log

To start/stop/restart Apache:

  sudo apachectl start|stop|restart




=====
 APC
=====

To install APC on OSX 10.7:

  * Follow these instructions: http://neilang.com/entries/install-apc-on-osx/ 
  * When done, add apc.enable_cli=1 to php.ini.




=====
 Bash
=====

To execute a command once for every file in the current directory:
(From: http://stackoverflow.com/questions/10523415/bash-script-to-execute-command-on-all-files-in-directory)

  for file in ./*; do cmdname $file; done

To recursively (-r) zip a folder (and all of its contents), split the resulting archive into multiple 1 GB files (-s 1g),
and do it all as fast as possible (-0 switch means no compression; -9 would be max compression):

  zip -r -s 1g -0 archivename.zip foldername/

To find a file (where . is the starting directory, use / for entire system):

  find . -name "file.txt"

If a directory contains too many files, "ls" or "rm" can take a long time. You can use "find" to delete files faster.

  find . -name "file.txt" -delete




=====
 Git
=====

To show changed files and their status:

  git status -s

To un-stage a single file from the index:

  git reset <filename>

To reset changes made to an un-staged file:

  git checkout <filename>

To blow away all current changes and reset to the last commit:

  git reset --hard

To remove newly created (but not yet added to the repo) files:

  git clean -f

To merge a branch into another branch:

  git checkout destinationBranchName
  git merge sourceBranchName

To find the common ancestor between two branches, use git merge-base:

  git merge-base branchname1 branchname2

To get the names of all files changed between two commits:

  git diff --name-only commit1SHAorBranchName commit2SHAorBranchName

To get the names of all files changed from the creation of the current branch to its head:

  git diff --name-only `git merge-base head master` head

To search the Git commit history for a commit message containing a particular string:

  git log --grep="your search term"

To search the Git commit history for any instance of a particular regular expression match (takes a LONG time):

  git grep <regex> $(git rev-list --all)

To revert the effects of a given commit without auto-committing the result (so you can inspect and edit the reverted changes):

  git revert -n <commit hash whose changes should be reverted>

To create a copy of the current HEAD commit without .git folders and other metadata (similar to svn export):

  git archive -o output.zip HEAD

To cherry pick from another repository

  1. Add a remote for that repository:
      cd tabletfe
      git remote add mobilefe ssh://ssh@github.com/SMG-Digital/mobilefe.git

  2. Fetch from the new remote:
      git fetch mobilefe

  3. Now cherry pick the commits you want from the remote (just use their SHA values):
      git cherry-pick -x e8f95894b77b602655ee635f9be559ce9802884e

  4. Resolve any conflicts if necessary.





=====
 Heroku
=====

Deploying to Heroku was difficult the first time. Here is how I did it (after installing Heroku Toolchain):

  heroku login (only need to run this the first time)
  cd your_rails_projects_git_repo
  heroku create
  git push heroku master
  heroku pg:reset
  heroku run rake db:schema:load
  heroku open

To migrate your database on Heroku:

  heroku run rake db:migrate --app appname

To deploy a branch to your Heroku staging server:

  git push staging your-branch-name:master

To import a Heroku production backup into your Heroku staging server:

  heroku pgbackups:restore DATABASE_COLOR `heroku pgbackups:url backup_id --app production-app-name` --app staging-app-name

To take your website offline for maintenance, then online when you're done:

  heroku maintenance:on
  heroku maintenance:off

To check Heroku Postgres database size, use:

  heroku pg:info

To open a Heroku Postgres console, use:

  heroku pg:psql

To view all Heroku Postgres backups:

  heroku pgbackups

To backup your main Heroku Postgres database:

  heroku pgbackups:capture

To create a publically-accessible URL to a Postgres database backup (expires in 10 minutes):

  heroku pgbackups:url backup_id

To destroy a Heroku Postgres backup:

  heroku pgbackups:destroy backup_id

To restore to your Postgres primary database from a backup:

  heroku pgbackups:restore DATABASE backup_id







=======
 MySQL
=======

Files are located here:

  /usr/local/mysql/bin/mysql
  sudo /usr/local/mysql/bin/mysqld --verbose --help
  /etc/my.cnf 

SQL can be kind of a pain to log in to. If the host, user, password and database are not exactly correct, the error message is cryptic.
Be very explicit to ward off problems:

  mysql -h host_name -u user_nae -p -D database_name

To dump a MySQL database:

  mysqldump -u username -p dbname > output.sql

To import a MySQL database dumped via mysqldump:

  mysql -u username -p dbname < output.sql





=======
 Nginx
=======

Nginx is installed at:

  /usr/local/sbin/nginx

Nginx configuration file is located at:

  /usr/local/etc/nginx/nginx.conf





=======
 Node.js
=======

Node is installed at:

  /usr/local/bin/node

NPM is located at:

  /usr/local/bin/npm





======
 PATH
======

Edit this file to modify PATH variable:

  /etc/paths





======
 PEAR
======

Files are located here:

  /usr/bin/pear

PEAR PHP code is stored here:

  /usr/share/pear
  /usr/lib/php/pear





=====
 PHP
=====

Files are located here:

  /etc/php.ini
  /usr/bin/php
  /usr/lib/php/

To install ImageMagick on OSX 10.6:

  * Follow these instructions: http://verysimple.com/2011/12/21/install-image-magick-for-php-on-osx/
  * When you get to Step 2, download imagick manually instead of using PECL, and use the instructions from phpize onward: http://pecl.php.net/package/imagick





=========
 Postfix
=========

Files are located here:

  /etc/postfix/main.cf





=========
 PostgreSQL
=========

To install PostgreSQL on Mac OS:

  http://railscasts.com/episodes/342-migrating-to-postgresql

To create a PostgreSQL database:

  createdb database_name

After PostgreSQL has been installed for the first time, you will be unable to use the
psql command to access its command line terminal. An error will appear saying 'database
"yourusername" does not exist'. You will need to create a database with a name matching
your username in order to proceed:

  createdb yourusername

To enter the PostgreSQL command line and work on a specific database use:

  psql -d database_name

To exit the psql command line utility:

  \q

To set up a PostgreSQL database for app_name with user app_name for a Rails project:

  createdb app_name
  psql -d app_name
  CREATE USER app_name LOGIN CREATEDB;
  ALTER USER app_name WITH ENCRYPTED PASSWORD 'password'; # note, it appears that you must use single quotes here
  \q

To list all tables within the psql command line utility:

  \d





=========
 Rails 3
=========

To create a new rails project:

  mkdir project_dir
  cd project_dir
  rails new .

To show all RVM gemsets:

  rvm gemset list

To create an RVM gemset:

  rvm gemset create name_of_gemset

To scaffold an entire RESTful resource (including model, controller, view, and tests):

  rails generate scaffold ModelName some_db_column:type another_db_column:type

To scaffold *just* a controller:

  rails generate controller ControllerName action_name another_action_name

Rails scaffolding field types:

  string
  text (long text, up to 64k, often used for text areas)
  datetime
  date
  integer
  binary
  boolean
  float
  decimal (for financial data)
  time
  timestamp

To update development database with schema changes:

  bundle exec rake db:migrate

To generate a blank database migration:

  rails generate migration name_of_migration

To rollback database changes on exit from rails console:

  rails console --sandbox

To wipe the database and load the latest schema:

  rake db:reset
  (You might have to restart the server after running this for the changes to take effect.)

To access your local rails development server from a local virtual machine:

  rails server -b 10.211.55.2 (where the IP is the IP of your physical machine on the VM's virtual network)
  In your VM's browser, surf to: http://10.211.55.2:3000/

To debug using ruby-debug gem:

  - Add this line to your code:
    deugger

  - Start your server with the --debugger option:
    rails server --debugger





=======
 Redis
=======

Binaries are located in:

  /usr/local/bin    





=================
 Selenium Server
=================

Files are located in;

  /usr/local/selenium





=================
 Symfony 2
=================

MODEL

To generate getters/setters for entities, run this:

  php app/console doctrine:generate:entities Acme/StoreBundle/Entity/Product

To update the database to match the schema definition in your code, run this:

  php app/console doctrine:schema:update --force 


FOS USER BUNDLE

To get the group manager (FOS\UserBundle\Entity\GroupManager; the FOS interface to managing Group entities), call this from within a controller:

  $this->get('fos_user.group_manager')
